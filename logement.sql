-- EI4 ‚Ä¢ IoT - TP 1
-- ANDRIATSILAVO Matteo - TP A

-- Qs.1 - Mod√®le relationnel de la BDD
-- Diagramme r√©alis√© et valid√© ‚úÖ.

--üí° Pour la date d'insertion dans la base, utiliser la construction:
-- TIMESTAMP DEFAULT CURRENT_TIMESTAMP

-- Qs.2 - Ordres SQL permettant de d√©truire toutes les tables pr√©sentes dans la base.
DROP TABLE IF EXISTS logements;
DROP TABLE IF EXISTS pieces;
DROP TABLE IF EXISTS factures;
DROP TABLE IF EXISTS capteurs;         -- table des capteurs et des actionneurs (Cap_Act)
DROP TABLE IF EXISTS mesures;
DROP TABLE IF EXISTS types_capteurs;   -- table des types des capteurs et des actionneurs (Cap_Act)

--üí° La commande sqlite3 pour lire un fichier est `$ .read fichier.sql`.

-- Qs.3 - Ordres SQL permettant de cr√©er toutes les tables pr√©sentes dans la base.

-- Un logement est la plus "grande" entit√© de notre mod√®le relationnel. Il peut contenir une √† plusieurs pi√®ces et est aliment√© de factures.
CREATE TABLE logements(
    -- ID du logement, unique, ne peut √™tre nul (PK)
    id                  INTEGER PRIMARY KEY AUTOINCREMENT,    
    -- Adresse du logement, ne peut √™tre nul
    adresse             TEXT NOT NULL,                      
    -- Numero de t√©l√©phone du logement, limit√© √† 12 caract√®res, ne peut √™tre nul
    numero_telephone    TEXT NOT NULL,                          
    -- Adresse IP du logement, limit√© √† 20 caract√®res, ne peut √™tre nul 
    adresse_IP          TEXT NOT NULL,                          
    -- Date d'insertion dans la table, automatiquement renseign√©e
    date_insertion      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Une pi√®ce peut contenir (ou non) des capteurs/actionneurs et fait partie d'un logement, elle est √©galement mod√©lis√© dans l'espace par des coordonn√©es.
CREATE TABLE pieces(
    -- ID de la pi√®ce, unique, ne peut √™tre nul (PK)
    id              INTEGER PRIMARY KEY AUTOINCREMENT,            
    -- ID du logement auquel appartient la pi√®ce, pas unique car un logement peut avoir 1 √† plusieurs pi√®ces 
    -- et ne peut √™tre nul car une pi√®ce appartient forc√©ment √† un logement 
    id_logement     INTEGER NOT NULL,  
    -- Nom de la pi√®ce, limit√© √† 255 caract√®res, ne peut √™tre nul
    nom             TEXT NOT NULL,                              
    -- Coordonn√©e X de la pi√®ce, pr√©cision limit√©e √† un entier, ne peut √™tre nul
    coordonnee_x    INTEGER NOT NULL,                                       
    -- Coordonn√©e Y de la pi√®ce, pr√©cision limit√©e √† un entier, ne peut √™tre nul
    coordonnee_y    INTEGER NOT NULL,                                       
    -- Coordonn√©e Z de la pi√®ce, pr√©cision limit√©e √† un entier, ne peut √™tre nul
    coordonnee_z    INTEGER NOT NULL,
    --#-- Cl√© √©trang√®re faisant r√©f√©rence au logement auquel la pi√®ce appartient (FK)
    FOREIGN KEY (id_logement) REFERENCES logements(id)
);


-- Les factures peuvent √™tre de diff√©rents types, elles ont un montant, une valeur de consommation et alimentent un logement.
CREATE TABLE factures(
    -- ID de la facture, unique, ne peut √™tre nul
    id                  INTEGER PRIMARY KEY AUTOINCREMENT,    
    -- ID du logement auquel est rattach√© la facture, pas unique et peut √™tre nul car un logement peut avoir (ou pas) 1 √† plusieurs factures
    id_logement         INTEGER,  
    -- Nom de la facture, limit√© √† 255 caract√®res, ne peut √™tre nul
    nom             TEXT NOT NULL,
    -- Date d'√©mission de la facture, renseign√©e automatiquement
    date_emission       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    -- Montant forfaitaire de la facture, ne peut √™tre nul
    montant             FLOAT NOT NULL,
    -- Valeur consomm√©e de la facture, peut √™tre nulle car facture non consomm√©e
    valeur_consommee    FLOAT,
    --#-- Cl√© √©trang√®re faisant r√©f√©rence au logement auquel la facture est rattach√©e (FK)
    FOREIGN KEY (id_logement) REFERENCES logements(id)
);


-- La table des types de capteurs permet de conna√Ætre le type de mesure effectu√©e par un capteur, l'unit√© de la mesure, la pr√©cision et d'autres infos utiles.
CREATE TABLE types_capteurs(
    -- ID du capteur/actionneur, unique, ne peut √™tre nul
    id              INTEGER PRIMARY KEY AUTOINCREMENT,
    -- Type de mesure r√©alis√©e par le capteur, limit√© √† 255 caract√®res, unique, ne peut √™tre nul 
    type_mesure     TEXT NOT NULL UNIQUE,
    -- Unit√© de mesure du capteur, limit√©e √† 20 caract√®res (pr√©fixes, puissances, etc.), ne peut √™tre nulle
    unite_mesure    TEXT NOT NULL,
    -- Plage de pr√©cision de la mesure, limit√©e √† 255 caract√®res, ne peut √™tre nulle
    plage_precision TEXT NOT NULL,
    -- Autres informations utiles sur le capteur/actionneur, peuvent √™tre vides si inexistantes
    autres_infos    TEXT
);


-- Un capteur/actionneur effectue une mesure/action, il a une r√©f√©rence commerciale, est associ√© √† une pi√®ce et poss√®de un port de communication avec le serveur.
CREATE TABLE capteurs(
    -- ID du capteur/actionneur, unique, ne peut √™tre nul (PK)
    id                          INTEGER PRIMARY KEY AUTOINCREMENT,
    -- Type du cap_act d√©termin√© par la table `types_capteurs`, non unique et ne peut √™tre nul 
    id_type_capteur             INTEGER NOT NULL,
    -- R√©f√©rence commerciale, limit√©e √† 255 caract√®res, non unique car plusieurs capteurs peuvent venir d'un m√™me constructeur,
    -- et non nulle car un capteur provient forc√©ment d'un constructeur
    reference_commerciale       TEXT NOT NULL,
    -- ID de la pi√®ce √† laquelle est associ√© le capteur, peut √™tre nul car une pi√®ce peut ne pas avoir de capteur
    id_piece                    INTEGER,
    -- Num√©ro du port avec lequel le capteur communique avec le serveur, peut √™tre nul si pas attribu√© 
    port_communication_serveur  INTEGER,
    -- Date d'insertion du capteur dans la table
    date_insertion              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    --#-- Cl√© √©trang√®re faisant r√©f√©rence au type du capteur d'apr√®s la table pr√©c√©dente
    FOREIGN KEY (id_type_capteur) REFERENCES types_capteurs(id),
    --#-- Cl√© √©trang√®re faisant r√©f√©rence √† la pi√®ce √† laquelle le capteur est associ√© (FK)
    FOREIGN KEY (id_piece) REFERENCES pieces(id)
);


-- Une mesure est r√©alis√©e par un capteur, elle poss√®de une valeur dont l'unit√©/la dimension est renseign√©e dans la table d√©di√©e.
CREATE TABLE mesures(
    -- ID de la mesure, unique, ne peut √™tre nul (PK)
    id              INTEGER PRIMARY KEY AUTOINCREMENT,
    -- Valeur de la mesure, ne peut √™tre nulle
    valeur          FLOAT NOT NULL,
    -- ID du capteur auquel est associ√©e la mesure, ne peut √™tre nul
    id_capteur      INTEGER NOT NULL,
    -- Date d'insertion du capteur dans la table
    date_insertion  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    --#-- Cl√© √©trang√®re faisant r√©f√©rence au capteur auquel la mesure est associ√©e (FK)
    FOREIGN KEY (id_capteur) REFERENCES capteurs(id)
);


--üí° Montrer toutes les tables existantes: `SHOW DATABASES;`


-- Qs.4 -
-- Ajouter un logement avec quatre pi√®ces
INSERT INTO logements(adresse, numero_telephone, adresse_IP) VALUES ('4 place Jussieu 75005 Paris', '0607080910', '192.168.0.1'); 
INSERT INTO pieces(id_logement, nom, coordonnee_x, coordonnee_y, coordonnee_z) 
VALUES (1, 'salle_321', 3, 2, 1), (1, 'salle_327', 3, 2, 7), (1, 'salle_306', 3, 0, 6), (1, 'salle_305', 3, 0, 5);


-- Qs.5 -
-- Ajouter quatre types de capteurs/actionneurs
INSERT INTO types_capteurs(type_mesure, unite_mesure, plage_precision)
VALUES  ('humidite', '%', '[-1;+1]%'), 
        ('temperature_C', '¬∞C', '[-2;+2]¬∞C'), 
        ('temperature_K', '¬∞K', '[-10;+10]¬∞K'),
        ('temperature_F', '¬∞F', '[-5;+5]¬∞F');


-- Qs.6 -
-- Ajouter deux capteurs/actionneurs
INSERT INTO capteurs(id_type_capteur, reference_commerciale, port_communication_serveur, id_piece)
VALUES  (1, 'DHT', 1880, 1),
        (2, 'DHT', 1880, 2);


-- Qs.7 -
-- Ajouter deux mesures par capteur/actionneur
INSERT INTO mesures(valeur, id_capteur)
VALUES  (17, 1),
        (16, 1),
        (27.4, 2),
        (27.6, 2);


-- Qs.8 -
-- Ajouter quatre factures
INSERT INTO factures(id_logement, nom, montant, valeur_consommee)
VALUES  (1, '√âlectricit√©', 50.00, 0.0),
        (1, 'Eau', 25.00, 0.0),
        (1, 'Chauffage', 12.50, 0.0),
        (1, 'Internet', 6.25, 0.0);